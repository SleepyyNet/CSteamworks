#!/usr/bin/env python
import os
import sys
from SteamworksParser import steamworksparser

CPP_HEADER = "// This file is automatically generated!\n\n"
CPP_MOCK_HEADER = "// This file is automatically generated!\n#include <iostream>\n\n"

g_SkippedFiles = (
    # We don't currently support the following interfaces because they don't provide a factory of their own.
    # You are expected to call GetISteamGeneric to get them.
    "isteamappticket.h",
    "isteamgamecoordinator.h",
    # PS3 is not supported.
    "isteamps3overlayrenderer.h",
)

g_TypeDict = {
    'EHTMLMouseButton': 'ISteamHTMLSurface::EHTMLMouseButton',
    'EHTMLKeyModifiers': 'ISteamHTMLSurface::EHTMLKeyModifiers',
}

# Just for Mock
g_RetDict = {
    # Built in types
    "uint32": "UINT32_MAX",
    "int32": "INT32_MAX",
    "int64": "INT64_MAX",
    "uint64": "UINT64_MAX",
    "uint8": "UINT8_MAX",
    "int": "INT32_MAX",
    "bool": "true",
    "const char *": '"TESTSTRINGTODO:UNICODE"',
    "float": 'FLT_MAX',
    #"uint8": "121",
    #"HServerListRequest": "NULL",
    #"AudioPlayback_Status": "(AudioPlayback_Status)0",

    # Valve typedefs and structs
    "SteamID_t": 'k_steamIDNil.ConvertToUint64()',
    'HSteamPipe': 'INT32_MAX',
    'HSteamUser': 'INT32_MAX',
    'ControllerActionSetHandle_t': 'UINT64_MAX',
    'ControllerDigitalActionHandle_t': 'UINT64_MAX',
    'ControllerDigitalActionData_t': 'ControllerDigitalActionData_t()',
    'ControllerAnalogActionHandle_t': 'UINT64_MAX',
    'ControllerAnalogActionData_t': 'ControllerAnalogActionData_t()',
    'SteamAPICall_t': 'UINT64_MAX',

    'FriendsGroupID_t': 'UINT16_MAX',
    'AppId_t': 'UINT32_MAX',
    'HAuthTicket': 'UINT32_MAX',
    'HTTPRequestHandle': 'UINT32_MAX',
    'HTTPCookieContainerHandle': 'UINT32_MAX',
    'HServerListRequest': '(HServerListRequest)0xDEADBEEF',
    'HServerQuery': 'INT32_MAX',
    'SNetListenSocket_t': 'UINT32_MAX',
    'PublishedFileUpdateHandle_t': 'UINT64_MAX',
    'SNetSocket_t': 'UINT32_MAX',
    'UGCHandle_t': 'UINT64_MAX',
    'UGCFileWriteStreamHandle_t': 'UINT64_MAX',
    'UGCQueryHandle_t': 'UINT64_MAX',
    'UGCUpdateHandle_t': 'UINT64_MAX',
    'ScreenshotHandle': 'UINT32_MAX',
    'ClientUnifiedMessageHandle': 'UINT64_MAX',
    'AudioPlayback_Status': 'AudioPlayback_Playing'
}



def main(bMock):
    entrypoints = []
    cppfilenames = []

    try:
        os.makedirs("wrapper/")
    except OSError:
        pass

    with open("wrapper/steam_api_c.h", "w") as header:
        header.write(CPP_HEADER)
        header.write("#pragma once\n\n")
        header.write("#include \"CSteamworks.h\"\n\n")

    #steamworksparser.Settings.warn_utf8bom = True
    #steamworksparser.Settings.warn_includeguardname = True
    #steamworksparser.Settings.print_unuseddefines = True
    steamworksparser.Settings.fake_gameserver_interfaces = True
    parser = steamworksparser.parse("steam/")

    for f in parser.files:
        if f.name in g_SkippedFiles:
            continue

        print("File: " + f.name)
        if not f.interfaces:
            continue

        with open("wrapper/" + os.path.splitext(f.name)[0] + ".cpp", "w") as out, open("wrapper/steam_api_c.h", "a") as header:
            if bMock:
                out.write(CPP_MOCK_HEADER)
            else:
                out.write(CPP_HEADER)
            cppfilenames.append(os.path.splitext(f.name)[0] + ".cpp")

            lastIfBlock = None
            for i in f.interfaces:
                print(" - " + i.name)
                for func in i.functions:
                    if lastIfBlock is not None and lastIfBlock != func.ifstatements:
                        out.write("#endif\n")
                        lastIfBlock = None

                    if func.ifstatements and func.ifstatements != lastIfBlock:
                        out.write("#if " + func.ifstatements + "\n")
                        lastIfBlock = func.ifstatements

                    if func.private:
                        continue

                    def create_arg_string(arg):
                        argtype = g_TypeDict.get(arg.type, arg.type)
                        space = "" if argtype.endswith("*") and " " in argtype else " "
                        defaultarg = "" if not arg.default else " = " + arg.default
                        return argtype + space + arg.name + defaultarg

                    args = ", ".join([create_arg_string(arg) for arg in func.args])
                    if bMock:
                        outargs = []
                        def create_mockargnames_string(arg, outargs):
                            argname = arg.name
                            if "*" in arg.type:
                                if arg.type in ('SteamControllerState_t *', 'FriendGameInfo_t *', 'CSteamID *',
                                    'void *', 'const void *', 'SteamItemDetails_t *', 'ISteamMatchmakingServerListResponse *',
                                    'ISteamMatchmakingPingResponse *', 'ISteamMatchmakingPlayersResponse *', 'ISteamMatchmakingRulesResponse *',
                                    'P2PSessionState_t *', 'SteamParamStringArray_t *', 'SteamUGCDetails_t *', 'const SteamParamStringArray_t *',
                                    'LeaderboardEntry_t *', 'const char **', 'char **', 'char *'):
                                    outargs.append('\t' + argname + ';\n')
                                else:
                                    argname = "*" + argname

                            if arg.type == "CSteamID":
                                argname += ".ConvertToUint64()"
                            elif arg.type == "CGameID":
                                argname += ".ToUint64()"
                            return argname

                        argnames = ' << " " << '.join([create_mockargnames_string(arg, outargs) for arg in func.args])
                    else:
                        argnames = ", ".join([arg.name for arg in func.args])

                    returntype = func.returntype
                    ConvertToUint64 = ""
                    if returntype == "CSteamID":
                        returntype = "SteamID_t"
                        ConvertToUint64 = ".ConvertToUint64()"

                    # If a function overrides another with the same name but different args, we fix it up here so that it can be properly exposed.
                    strEntryPoint = i.name + "_" + func.name
                    if strEntryPoint in entrypoints:
                        strEntryPoint += "_"
                    entrypoints.append(strEntryPoint)

                    declaration = "SB_API " + returntype + " S_CALLTYPE " + strEntryPoint + "(" + args + ")"
                    header.write(declaration + ";\n")
                    out.write(declaration + " {\n")
                    if bMock:
                        if argnames:
                            out.write('\tstd::cout << "' + strEntryPoint + '(): " << " " << ' + argnames + ' << "\\n";\n')
                        else:
                            out.write('\tstd::cout << "' + strEntryPoint + '()\\n";\n')

                        for arg in outargs:
                            out.write('//' + arg)


                        if returntype.startswith("E"):
                            out.write("\treturn (" + returntype + ")0;\n")
                        elif returntype.endswith("*") and returntype not in g_RetDict:
                            out.write("\treturn (" + returntype + ")0xDEADBEEF;\n")
                        elif returntype != "void":
                            out.write('\treturn ' + g_RetDict[returntype] + ';\n')
                    else:
                        out.write("\treturn " + i.name[1:] + "()->" + func.name + "(" + argnames + ")" + ConvertToUint64 + ";\n")

                    out.write("}\n")
                    out.write("\n")

            if lastIfBlock:
                out.write("#endif\n")

    if cppfilenames:
        with open("wrapper/unitybuild.cpp", "w") as out:
            out.write(CPP_HEADER)
            for filename in cppfilenames:
                out.write("#include \"" + filename + "\"\n")

if __name__ == "__main__":
    if len(sys.argv) == 2 and sys.argv[1] == "mock":
        main(True)
    else:
        main(False)
